{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","styles","position","top","videoElement","createRef","canvasElement","detectFromVideoFrame","model","video","detect","then","predictions","showDetections","requestAnimationFrame","error","console","log","context","current","getContext","clearRect","canvas","width","height","font","textBaseline","forEach","prediction","x","bbox","y","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","class","textHeight","parseInt","fillRect","fillText","score","toFixed","useEffect","a","navigator","mediaDevices","getUserMedia","stream","audio","window","srcObject","Promise","resolve","onloadedmetadata","net","cocoSsd","all","values","catch","err","prepare","className","id","style","ref","autoPlay","muted","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"+VA8GeA,EA1GH,WAEV,IAAMC,EAAS,CACbC,SAAU,QACVC,IAAK,KAGDC,EAAeC,oBAAU,MACzBC,EAAgBD,sBAEfE,EAAuB,SAAvBA,EAAwBC,EAAOC,GACpCD,EAAME,OAAOD,GAAOE,MAAK,SAAAC,GACvBC,EAAeD,GAEfE,uBAAsB,WACpBP,EAAqBC,EAAOC,SAE7B,SAACM,GACFC,QAAQC,IAAI,6BACZD,QAAQD,MAAMA,OAIXF,EAAiB,SAAAD,GACtB,IAAMM,EAAUZ,EAAca,QAAQC,WAAW,MACjDF,EAAQG,UAAU,EAAG,EAAGH,EAAQI,OAAOC,MAAOL,EAAQI,OAAOE,QAC7D,IAAMC,EAAO,iBACbP,EAAQO,KAAOA,EACfP,EAAQQ,aAAe,MAEvBd,EAAYe,SAAQ,SAAAC,GAClB,IAAMC,EAAID,EAAWE,KAAK,GACpBC,EAAIH,EAAWE,KAAK,GACpBP,EAAQK,EAAWE,KAAK,GACxBN,EAASI,EAAWE,KAAK,GAE/BZ,EAAQc,YAAc,UACtBd,EAAQe,UAAY,EACpBf,EAAQgB,WAAWL,EAAGE,EAAGR,EAAOC,GAEhCN,EAAQiB,UAAY,UACpB,IAAMC,EAAYlB,EAAQmB,YAAYT,EAAWU,OAAOf,MAClDgB,EAAaC,SAASf,EAAM,IAElCP,EAAQuB,SAASZ,EAAGE,EAAGK,EAAY,GAAIG,EAAa,IAEpDrB,EAAQuB,SAASZ,EAAGE,EAAIP,EAASe,EAAYH,EAAY,GAAIG,EAAa,IAG1ErB,EAAQiB,UAAY,UACpBjB,EAAQwB,SAASd,EAAWU,MAAOT,EAAGE,GACtCb,EAAQwB,SAASd,EAAWe,MAAMC,QAAQ,GAAIf,EAAGE,EAAIP,EAASe,OAqClE,OAjCAM,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sDACMC,UAAUC,cAAgBD,UAAUC,aAAaC,eAE3CC,EAASH,UAAUC,aAAaC,aAAa,CACjDE,OAAO,EACP1C,OAAO,IAENE,MAAK,SAAAuC,GAGJ,OAFAE,OAAOF,OAASA,EAChB9C,EAAae,QAAQkC,UAAYH,EAC1B,IAAII,SAAQ,SAAAC,GACjBnD,EAAae,QAAQqC,iBAAmB,WACtCD,WAGF,SAAAxC,GACFC,QAAQC,IAAI,6CAEVwC,EAAMC,MACZJ,QAAQK,IAAI,CAACF,EAAKP,IACfvC,MAAK,SAAAiD,GACJrD,EAAqBqD,EAAO,GAAIxD,EAAae,YAE9C0C,OAAM,SAAAC,GACL9C,QAAQD,MAAM+C,OAxBxB,4CADc,uBAAC,WAAD,wBA6BZC,MAKF,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,2BACEC,GAAG,OACHC,MAAOjE,EACPkE,IAAK/D,EACLmB,MAAM,MACNC,OAAO,MACP4C,UAAQ,EACRC,OAAK,IAEP,4BAAQH,MAAOjE,EAAQkE,IAAK7D,EAAeiB,MAAM,MAAMC,OAAO,WC5FlD8C,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB/B,WACrBA,UAAUgC,cAAcC,MACrBrE,MAAK,SAAAsE,GACJA,EAAaC,gBAEdrB,OAAM,SAAA9C,GACLC,QAAQD,MAAMA,EAAMoE,c","file":"static/js/main.a5a69c2c.chunk.js","sourcesContent":["import React, { useEffect, createRef } from \"react\";\r\nimport \"./App.css\";\r\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\r\n\r\nconst App = () => {\r\n\r\n  const styles = {\r\n    position: 'fixed',\r\n    top: 100,\r\n  };\r\n\r\n  const videoElement = createRef(null);\r\n  const canvasElement = createRef();\r\n\r\n   const detectFromVideoFrame = (model, video) => {\r\n    model.detect(video).then(predictions => {\r\n      showDetections(predictions);\r\n\r\n      requestAnimationFrame(() => {\r\n        detectFromVideoFrame(model, video);\r\n      });\r\n    }, (error) => {\r\n      console.log(\"Couldn't start the webcam\")\r\n      console.error(error)\r\n    });\r\n  };\r\n\r\n   const showDetections = predictions => {\r\n    const context = canvasElement.current.getContext(\"2d\");\r\n    context.clearRect(0, 0, context.canvas.width, context.canvas.height);\r\n    const font = \"24px helvetica\";\r\n    context.font = font;\r\n    context.textBaseline = \"top\";\r\n\r\n    predictions.forEach(prediction => {\r\n      const x = prediction.bbox[0];\r\n      const y = prediction.bbox[1];\r\n      const width = prediction.bbox[2];\r\n      const height = prediction.bbox[3];\r\n      // Draw box\r\n      context.strokeStyle = \"#2fff00\";\r\n      context.lineWidth = 1;\r\n      context.strokeRect(x, y, width, height);\r\n      // Draw label with background\r\n      context.fillStyle = \"#2fff00\";\r\n      const textWidth = context.measureText(prediction.class).width;\r\n      const textHeight = parseInt(font, 10);\r\n      // draw top left rectangle\r\n      context.fillRect(x, y, textWidth + 10, textHeight + 10);\r\n      // draw bottom left rectangle\r\n      context.fillRect(x, y + height - textHeight, textWidth + 15, textHeight + 10);\r\n\r\n      // Draw text last to ensure it's on top.\r\n      context.fillStyle = \"#000000\";\r\n      context.fillText(prediction.class, x, y);\r\n      context.fillText(prediction.score.toFixed(2), x, y + height - textHeight);\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    async function prepare() {\r\n      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n        \r\n          const stream = navigator.mediaDevices.getUserMedia({\r\n            audio: false,\r\n            video: true,\r\n          })\r\n            .then(stream => {\r\n              window.stream = stream;\r\n              videoElement.current.srcObject = stream;\r\n              return new Promise(resolve => {\r\n                videoElement.current.onloadedmetadata = () => {\r\n                  resolve();\r\n                };\r\n              });\r\n            }, (error => {\r\n              console.log('there was an error starting the webcam');\r\n            }));\r\n            let net = cocoSsd.load();\r\n          Promise.all([net, stream])\r\n            .then(values => {\r\n              detectFromVideoFrame(values[0], videoElement.current);\r\n            })\r\n            .catch(err => {\r\n              console.error(err);\r\n            });\r\n        }\r\n      }\r\n      prepare();\r\n    }\r\n  )\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <video\r\n          id=\"blah\"\r\n          style={styles}\r\n          ref={videoElement}\r\n          width=\"420\"\r\n          height=\"500\"\r\n          autoPlay\r\n          muted\r\n        />\r\n        <canvas style={styles} ref={canvasElement} width=\"420\" height=\"550\" />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}